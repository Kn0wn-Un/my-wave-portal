{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","userWaves","setUserWaves","waving","setWaving","animation","setAnimation","waveMessage","setWaveMessage","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getUserWaves","uw","toNumber","connectWallet","alert","wave","getTotalWaves","count","gasLimit","waveTxn","hash","wait","setTimeout","getAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","message","on","from","prevState","useEffect","className","type","value","onChange","e","target","maxLength","placeholder","onClick","disabled","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.482d3245.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nexport default function App() {\n\tconst [currentAccount, setCurrentAccount] = useState('');\n  const [allWaves, setAllWaves] = useState([]);\n\tconst [userWaves, setUserWaves] = useState(0);\n  const [waving, setWaving] = useState(false);\n  const [animation, setAnimation] = useState('');\n  const [waveMessage, setWaveMessage] = useState('');\n\tconst contractAddress = '0xa6aAa39B81317F1371273c9Ff7beae5665882413';\n\tconst contractABI = abi.abi;\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log('We have the ethereum object', ethereum);\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Check if we're authorized to access the user's wallet\n\t\t\t */\n\t\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(\n\t\t\t\t\tcontractAddress,\n\t\t\t\t\tcontractABI,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\t\t\t\tlet uw = await wavePortalContract.getUserWaves();\n\t\t\t\tsetUserWaves(uw.toNumber());\n\t\t\t} else {\n\t\t\t\tconsole.log('No authorized account found');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\t/**\n\t * Implement your connectWallet method here\n\t */\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t});\n\n\t\t\tconsole.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst wavePortalContract = new ethers.Contract(\n\t\t\t\tcontractAddress,\n\t\t\t\tcontractABI,\n\t\t\t\tsigner\n\t\t\t);\n\t\t\tlet uw = await wavePortalContract.getUserWaves();\n\t\t\tsetUserWaves(uw.toNumber());\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(\n\t\t\t\t\tcontractAddress,\n\t\t\t\t\tcontractABI,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tlet count = await wavePortalContract.getTotalWaves();\n\t\t\t\tconsole.log('Retrieved total wave count...', count.toNumber());\n\n\t\t\t\tconst waveTxn = await wavePortalContract.wave(waveMessage, { gasLimit: 300000 });\n\t\t\t\tconsole.log('Mining...', waveTxn.hash);\n        setWaving(true);\n\n\t\t\t\tawait waveTxn.wait();\n\t\t\t\tconsole.log('Mined -- ', waveTxn.hash);\n        setWaving(false);\n        setWaveMessage('');\n        setAnimation('thanks');\n        setTimeout(()=>{\n          setAnimation('');\n        }, 5000);\n\n\t\t\t\tcount = await wavePortalContract.getTotalWaves();\n\t\t\t\tconsole.log('Retrieved total wave count...', count.toNumber());\n\t\t\t\tlet uw = await wavePortalContract.getUserWaves();\n\t\t\t\tsetUserWaves(uw.toNumber());\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n        \n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n\n         /**\n         * Listen in for emitter events!\n         */\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\t/*\n\t * This runs our function when the page loads.\n\t */\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n    getAllWaves();\n\t}, []);\n\n\n\treturn (\n\t\t<div className=\"mainContainer\">\n\t\t\t<div className=\"dataContainer\">\n\t\t\t\t<div className=\"header\">ðŸ‘‹ Hey there!</div>\n\n\t\t\t\t<div className=\"bio\">\n\t\t\t\t\tI am Darshan, it's nice to meet you! Connect your Ethereum wallet and\n\t\t\t\t\twave at me! (Dayammm... this is cool)\n\t\t\t\t</div>\n        <input type=\"text\" value={waveMessage} onChange={(e)=>{setWaveMessage(e.target.value)}}  maxLength=\"100\" placeholder=\"say something here\" />\n\n\t\t\t\t{waving ? (\n          <button className=\"waveButton\" onClick={wave} disabled>\n\t\t\t\t\tWaving...\n\t\t\t\t  </button>\n        ) : (<button className=\"waveButton\" onClick={wave}>\n\t\t\t\t\tWave at Me\n\t\t\t\t</button>)}\n\n\t\t\t\t{!userWaves ? (\n\t\t\t\t\t''\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className=\"bio\">\n\t\t\t\t\t\t\tUser {currentAccount} you have waved at me\n\t\t\t\t\t\t\t<span className={animation}>ðŸŽ‰{userWaves} times!ðŸŽ‰</span>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h3 className={`thank-you ${animation}`}>Thank You!</h3>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{/*\n\t\t\t\t * If there is no currentAccount render this button\n\t\t\t\t */}\n\t\t\t\t{!currentAccount && (\n\t\t\t\t\t<button className=\"waveButton\" onClick={connectWallet}>\n\t\t\t\t\t\tConnect Wallet\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}